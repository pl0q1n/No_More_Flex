// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FilterTransactionsHandlerFunc turns a function with the right signature into a filter transactions handler
type FilterTransactionsHandlerFunc func(FilterTransactionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FilterTransactionsHandlerFunc) Handle(params FilterTransactionsParams) middleware.Responder {
	return fn(params)
}

// FilterTransactionsHandler interface for that can handle valid filter transactions params
type FilterTransactionsHandler interface {
	Handle(FilterTransactionsParams) middleware.Responder
}

// NewFilterTransactions creates a new http.Handler for the filter transactions operation
func NewFilterTransactions(ctx *middleware.Context, handler FilterTransactionsHandler) *FilterTransactions {
	return &FilterTransactions{Context: ctx, Handler: handler}
}

/*FilterTransactions swagger:route GET /transactions/filter filterTransactions

Filter transactions

*/
type FilterTransactions struct {
	Context *middleware.Context
	Handler FilterTransactionsHandler
}

func (o *FilterTransactions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFilterTransactionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
